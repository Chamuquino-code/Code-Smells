void method0() { 
public static final String KEY_TITLE = "Simulated Annealing";
public static final String KEY_CONFIG_NAME = "CONFIG_NAME";
public static final String KEY_INIT_TEMPERATURE = "Start Temperature";
public static final String KEY_MIN_TEMPERATURE = "min. Temperature";
public static final String KEY_MIN_DISTANCE = "min. Distance";
public static final String KEY_TEMP_SCALE_FACTOR = "Temperature Scalefactor";
public static final String KEY_COMPUTE_PERMUTATION = "should compute per Permutation";
public static final String KEY_IS_UPHILL_MOVE_ALLOWED = "are Uphill-Moves allowed";
public static final String KEY_MAX_ROUNDS = "max. Rounds";
public static final String KEY_TRIES_PER_CELL = "tries per cell";
public static final String KEY_COST_FUNCTION_CONFIG = "Costfunction Config";
public static final String KEY_LAMBDA = "Lambda";
public static final String KEY_BOUNDS = "Bounds of resulting graph";
public static final String KEY_LAYOUT_UPDATE_INIT_TEMPERATURE = "Layout Update Start Temperature";
public static final String KEY_LAYOUT_UPDATE_MIN_TEMPERATURE = "Layout Update min. Temperature";
public static final String KEY_LAYOUT_UPDATE_MIN_DISTANCE = "Layout Update min. Distance";
public static final String KEY_LAYOUT_UPDATE_TEMP_SCALE_FACTOR = "Layout Update Temperature Scalefactor";
public static final String KEY_LAYOUT_UPDATE_COMPUTE_PERMUTATION = "Layout Update should compute per Permutation";
public static final String KEY_LAYOUT_UPDATE_IS_UPHILL_MOVE_ALLOWED = "Layout Update are Uphill-Moves allowed";
public static final String KEY_LAYOUT_UPDATE_MAX_ROUNDS = "Layout Update max. Rounds";
public static final String KEY_LAYOUT_UPDATE_TRIES_PER_CELL = "Layout Update tries per cell";
public static final String KEY_LAYOUT_UPDATE_COST_FUNCTION_CONFIG = "Layout Update Costfunction Config";
public static final String KEY_LAYOUT_UPDATE_LAMBDA = "Layout Update Lambda";
public static final String KEY_LAYOUT_UPDATE_BOUNDS = "Layout Update Bounds of resulting graph";
public static final String KEY_LAYOUT_UPDATE_METHOD = "Layout Update Method";
public static final String KEY_LAYOUT_UPDATE_METHOD_NEIGHBORS_ONLY = "Layout Update Method Neighbors only";
public static final String KEY_LAYOUT_UPDATE_METHOD_PERIMETER = "Layout Update Method Perimeter";
public static final String KEY_LAYOUT_UPDATE_METHOD_NEIGHBORS_DEPTH = "Layout Update Method Neighbors depth";
public static final String KEY_LAYOUT_UPDATE_METHOD_PERIMETER_RADIUS = "Layout Update Method Perimeter radius";
public static final String KEY_LAYOUT_UPDATE_METHOD_PERIMETER_RADIUS_INCREASE = "Layout Update Method Perimeter radius increase";
public static final String KEY_LAYOUT_UPDATE_ENABLED = "Layout Update enabled";
public static final String KEY_LAYOUT_UPDATE_CLUSTERING_ENABLED = "Layout Update clustering enabled";
public static final String KEY_LAYOUT_UPDATE_CLUSTERING_FACTOR = "Layout Update clustering factor";
public static final String KEY_LAYOUT_UPDATE_CLUSTERING_MOVE_SCALE = "Layout Update clustering move scaling factor";
protected AnnealingLayoutAlgorithm layout;
private JTextField tf_initTemperature;
private JTextField tf_minTemperature;
private JTextField tf_minDistance;
private JTextField tf_tempScaleFactor;
private JTextField tf_maxRounds;
private JTextField tf_triesPerCell;
private JTextField tf_lambdaNodeDistribution;
private JTextField tf_lambdaBorderline;
private JTextField tf_lambdaEdgeLength;
private JTextField tf_lambdaEdgeCrossing;
private JTextField tf_lambdaEdgeDistribution;
private JTextField tf_lambdaNodeDistance;
private JTextField tf_boundsWidth;
private JTextField tf_boundsHeight;
private JCheckBox cb_computePermutation;
private JCheckBox cb_uphillMovesAllowed;
private JCheckBox cb_useNodeDistribution;
private JCheckBox cb_useBorderline;
private JCheckBox cb_useEdgeLength;
private JCheckBox cb_useEdgeCrossing;
private JCheckBox cb_useEdgeDistribution;
private JCheckBox cb_useNodeDistance;
private JButton button_takeViewportSize;
private JCheckBox cb_enableLayoutUpdate;
private JTextField tf_lu_initTemperature;
private JTextField tf_lu_minTemperature;
private JTextField tf_lu_minDistance;
private JTextField tf_lu_tempScaleFactor;
private JTextField tf_lu_maxRounds;
private JTextField tf_lu_triesPerCell;
private JTextField tf_lu_lambdaNodeDistribution;
private JTextField tf_lu_lambdaBorderline;
private JTextField tf_lu_lambdaEdgeLength;
private JTextField tf_lu_lambdaEdgeCrossing;
private JTextField tf_lu_lambdaEdgeDistribution;
private JTextField tf_lu_lambdaNodeDistance;
private JTextField tf_lu_boundsWidth;
private JTextField tf_lu_boundsHeight;
private JTextField tf_lu_method_neighborsDepth;
private JTextField tf_lu_method_perimeterRadius;
private JTextField tf_lu_method_perimeterRadiusInc;
private JTextField tf_lu_clustering_factor;
private JTextField tf_lu_clustering_moveScale;
private JCheckBox cb_lu_computePermutation;
private JCheckBox cb_lu_uphillMovesAllowed;
private JCheckBox cb_lu_useNodeDistribution;
private JCheckBox cb_lu_useBorderline;
private JCheckBox cb_lu_useEdgeLength;
private JCheckBox cb_lu_useEdgeCrossing;
private JCheckBox cb_lu_useEdgeDistribution;
private JCheckBox cb_lu_useNodeDistance;
private JCheckBox cb_lu_clustering_enable;
private JButton button_lu_takeViewportSize;
private JComboBox comb_loadPreSets;
private JComboBox comb_lu_Method;
protected Properties[] preSetConfigs;
private JPanel panelSurface;
private JPanel panelLUSurface;
private JTabbedPane tp_main;
JScrollPane panelSurfaceWrapper;
JScrollPane panelLUSurfaceWrapper;
private boolean isOptimizer;
}
