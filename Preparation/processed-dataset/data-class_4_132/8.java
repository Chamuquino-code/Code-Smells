/******************************************************************************/
/** Initialize the Swing Components
     */
private void initComponents() {
    panelSurface = new JPanel(new BorderLayout(5, 10));
    panelSurface.setBackground(new Color(205, 207, 215));
    setLayout(new BorderLayout(5, 10));
    tp_main = new JTabbedPane();
    add(tp_main, BorderLayout.CENTER);
    //getContentPane().add(panelSurface,BorderLayout.CENTER); 
    /*
        if( !isOptimizer )
            panelSurface.setBorder(
                BorderFactory.createTitledBorder(
                        BorderFactory.createEtchedBorder(),
                        "Values for main run"));
        */
    JPanel panelLabels = new JPanel(new GridLayout(8, 1, 0, 5));
    JPanel panelFields = new JPanel(new GridLayout(8, 1, 0, 5));
    JPanel panelVars = new JPanel(new BorderLayout(5, 10));
    JPanel panelLambda = new JPanel(new GridBagLayout());
    JPanel panelButtons = new JPanel(new GridLayout(1, 3, 10, 0));
    JPanel panelBounds = new JPanel(new GridBagLayout());
    JPanel panelCenter = new JPanel(new BorderLayout(5, 10));
    panelLabels.setOpaque(false);
    panelFields.setOpaque(false);
    panelVars.setOpaque(false);
    panelLambda.setOpaque(false);
    panelButtons.setOpaque(false);
    panelBounds.setOpaque(false);
    panelCenter.setOpaque(false);
    add(panelButtons, BorderLayout.SOUTH);
    panelVars.add(panelLabels, BorderLayout.WEST);
    panelVars.add(panelFields, BorderLayout.CENTER);
    panelCenter.add(panelLambda, BorderLayout.CENTER);
    panelCenter.add(panelBounds, BorderLayout.SOUTH);
    panelSurface.add(panelVars, BorderLayout.NORTH);
    panelSurface.add(panelCenter, BorderLayout.WEST);
    panelSurface.add(new JPanel(), BorderLayout.SOUTH);
    panelLabels.add(new JLabel("start temperature :"));
    panelLabels.add(new JLabel("min. temperature :"));
    panelLabels.add(new JLabel("min. distance :"));
    panelLabels.add(new JLabel("temperature scaling factor :"));
    panelLabels.add(new JLabel("max. rounds :"));
    panelLabels.add(new JLabel("tries per cell :"));
    panelLabels.add(new JLabel("are uphill-moves allowed :"));
    panelLabels.add(new JLabel("compute permutations :"));
    tf_initTemperature = new JTextField();
    tf_minTemperature = new JTextField();
    tf_minDistance = new JTextField();
    tf_tempScaleFactor = new JTextField();
    tf_maxRounds = new JTextField();
    tf_triesPerCell = new JTextField();
    tf_lambdaNodeDistribution = new JTextField();
    tf_lambdaBorderline = new JTextField();
    tf_lambdaEdgeLength = new JTextField();
    tf_lambdaEdgeCrossing = new JTextField();
    tf_lambdaEdgeDistribution = new JTextField();
    tf_lambdaNodeDistance = new JTextField();
    cb_computePermutation = new JCheckBox();
    cb_uphillMovesAllowed = new JCheckBox();
    cb_useNodeDistribution = new JCheckBox();
    cb_useBorderline = new JCheckBox();
    cb_useEdgeLength = new JCheckBox();
    cb_useEdgeCrossing = new JCheckBox();
    cb_useEdgeDistribution = new JCheckBox();
    cb_useNodeDistance = new JCheckBox();
    cb_computePermutation.setOpaque(false);
    cb_uphillMovesAllowed.setOpaque(false);
    cb_useNodeDistribution.setOpaque(false);
    cb_useBorderline.setOpaque(false);
    cb_useEdgeLength.setOpaque(false);
    cb_useEdgeCrossing.setOpaque(false);
    cb_useEdgeDistribution.setOpaque(false);
    cb_useNodeDistance.setOpaque(false);
    registerCheckBoxAction(cb_useNodeDistribution);
    registerCheckBoxAction(cb_useBorderline);
    registerCheckBoxAction(cb_useEdgeLength);
    registerCheckBoxAction(cb_useEdgeCrossing);
    registerCheckBoxAction(cb_useEdgeDistribution);
    registerCheckBoxAction(cb_useNodeDistance);
    panelFields.add(tf_initTemperature);
    panelFields.add(tf_minTemperature);
    panelFields.add(tf_minDistance);
    panelFields.add(tf_tempScaleFactor);
    panelFields.add(tf_maxRounds);
    panelFields.add(tf_triesPerCell);
    panelFields.add(cb_computePermutation);
    panelFields.add(cb_uphillMovesAllowed);
    panelLambda.add(new JLabel("Costfunction Nodedistribution :"), new GridBagConstraints(0, 0, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(new JLabel("Costfunction Borderline :"), new GridBagConstraints(0, 1, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(new JLabel("Costfunction Edgelength :"), new GridBagConstraints(0, 2, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(new JLabel("Costfunction Edgecrossing :"), new GridBagConstraints(0, 3, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(new JLabel("Costfunction Edge Distribution :"), new GridBagConstraints(0, 4, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(new JLabel("Costfunction Node Overlapping :"), new GridBagConstraints(0, 5, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(cb_useNodeDistribution, new GridBagConstraints(1, 0, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLambda.add(cb_useBorderline, new GridBagConstraints(1, 1, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLambda.add(cb_useEdgeLength, new GridBagConstraints(1, 2, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLambda.add(cb_useEdgeCrossing, new GridBagConstraints(1, 3, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLambda.add(cb_useEdgeDistribution, new GridBagConstraints(1, 4, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLambda.add(cb_useNodeDistance, new GridBagConstraints(1, 5, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLambda.add(tf_lambdaNodeDistribution, new GridBagConstraints(2, 0, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(tf_lambdaBorderline, new GridBagConstraints(2, 1, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(tf_lambdaEdgeLength, new GridBagConstraints(2, 2, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(tf_lambdaEdgeCrossing, new GridBagConstraints(2, 3, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(tf_lambdaEdgeDistribution, new GridBagConstraints(2, 4, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLambda.add(tf_lambdaNodeDistance, new GridBagConstraints(2, 5, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    JLabel[] label_AdditionalCF = getAdditionalCostFunctionLabels();
    JTextField[] tf_AdditionalCF = getAdditionalCostFunctionTextFields();
    JCheckBox[] cb_AdditionalCF = getAdditionalCostFunctionCheckBoxes();
    for (int i = 0; i < label_AdditionalCF.length; i++) panelLambda.add(label_AdditionalCF[i], new GridBagConstraints(0, AnnealingLayoutAlgorithm.COUT_COSTFUNCTION + i, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    for (int i = 0; i < cb_AdditionalCF.length; i++) panelLambda.add(cb_AdditionalCF[i], new GridBagConstraints(1, AnnealingLayoutAlgorithm.COUT_COSTFUNCTION + i, 1, 1, 0.5, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    for (int i = 0; i < tf_AdditionalCF.length; i++) panelLambda.add(tf_AdditionalCF[i], new GridBagConstraints(2, AnnealingLayoutAlgorithm.COUT_COSTFUNCTION + i, 1, 1, 0.5, 0.5, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    button_takeViewportSize = new JButton("take viewport size");
    button_takeViewportSize.setOpaque(false);
    JLabel labelBoundsWidth = new JLabel("max. width :");
    JLabel labelBoundsHeight = new JLabel("max. height :");
    tf_boundsWidth = new JTextField();
    tf_boundsHeight = new JTextField();
    panelBounds.add(button_takeViewportSize, new GridBagConstraints(0, 0, 1, 2, 0.5, 1.0, GridBagConstraints.SOUTHEAST, GridBagConstraints.HORIZONTAL, new Insets(25, 20, 15, 30), 0, 0));
    panelBounds.add(labelBoundsWidth, new GridBagConstraints(1, 0, 1, 1, 1.0, 1.0, GridBagConstraints.SOUTH, GridBagConstraints.HORIZONTAL, new Insets(15, 0, 5, 0), 0, 0));
    panelBounds.add(labelBoundsHeight, new GridBagConstraints(1, 1, 1, 1, 1.0, 1.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelBounds.add(tf_boundsWidth, new GridBagConstraints(2, 0, 1, 1, 1.0, 1.0, GridBagConstraints.SOUTH, GridBagConstraints.HORIZONTAL, new Insets(15, 0, 5, 0), 0, 0));
    panelBounds.add(tf_boundsHeight, new GridBagConstraints(2, 1, 1, 1, 1.0, 1.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    /*####################################################################*/
    panelLUSurface = new JPanel(new BorderLayout(5, 10));
    //panelLUSurface.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),"Values for Layout updates")); 
    panelLUSurface.setBackground(new Color(220, 205, 205));
    JPanel panelLULabels = new JPanel(new GridLayout(8, 1, 0, 5));
    JPanel panelLUFields = new JPanel(new GridLayout(8, 1, 0, 5));
    JPanel panelLUVars = new JPanel(new BorderLayout(5, 10));
    JPanel panelLULambda = new JPanel(new GridBagLayout());
    JPanel panelLUBounds = new JPanel(new GridBagLayout());
    JPanel panelLUCenter = new JPanel(new BorderLayout(5, 10));
    JPanel panelLUMethod = new JPanel(new BorderLayout(5, 10));
    panelLULabels.setOpaque(false);
    panelLUFields.setOpaque(false);
    panelLUVars.setOpaque(false);
    panelLULambda.setOpaque(false);
    panelLUBounds.setOpaque(false);
    panelLUCenter.setOpaque(false);
    panelLUMethod.setOpaque(false);
    panelLUVars.add(panelLULabels, BorderLayout.WEST);
    panelLUVars.add(panelLUFields, BorderLayout.CENTER);
    panelLUCenter.add(panelLULambda, BorderLayout.WEST);
    panelLUCenter.add(panelLUBounds, BorderLayout.SOUTH);
    panelLUSurface.add(panelLUVars, BorderLayout.NORTH);
    panelLUSurface.add(panelLUCenter, BorderLayout.CENTER);
    panelLUSurface.add(panelLUMethod, BorderLayout.SOUTH);
    panelLULabels.add(new JLabel("start temperature :"));
    panelLULabels.add(new JLabel("min. temperature :"));
    panelLULabels.add(new JLabel("min. distance :"));
    panelLULabels.add(new JLabel("temperature scaling factor :"));
    panelLULabels.add(new JLabel("max. rounds :"));
    panelLULabels.add(new JLabel("tries per cell :"));
    panelLULabels.add(new JLabel("are uphill-moves allowed :"));
    panelLULabels.add(new JLabel("compute permutations :"));
    tf_lu_initTemperature = new JTextField();
    tf_lu_minTemperature = new JTextField();
    tf_lu_minDistance = new JTextField();
    tf_lu_tempScaleFactor = new JTextField();
    tf_lu_maxRounds = new JTextField();
    tf_lu_triesPerCell = new JTextField();
    tf_lu_lambdaNodeDistribution = new JTextField();
    tf_lu_lambdaBorderline = new JTextField();
    tf_lu_lambdaEdgeLength = new JTextField();
    tf_lu_lambdaEdgeCrossing = new JTextField();
    tf_lu_lambdaEdgeDistribution = new JTextField();
    tf_lu_lambdaNodeDistance = new JTextField();
    cb_lu_computePermutation = new JCheckBox();
    cb_lu_uphillMovesAllowed = new JCheckBox();
    cb_lu_useNodeDistribution = new JCheckBox();
    cb_lu_useBorderline = new JCheckBox();
    cb_lu_useEdgeLength = new JCheckBox();
    cb_lu_useEdgeCrossing = new JCheckBox();
    cb_lu_useEdgeDistribution = new JCheckBox();
    cb_lu_useNodeDistance = new JCheckBox();
    cb_lu_computePermutation.setOpaque(false);
    cb_lu_uphillMovesAllowed.setOpaque(false);
    cb_lu_useNodeDistribution.setOpaque(false);
    cb_lu_useBorderline.setOpaque(false);
    cb_lu_useEdgeLength.setOpaque(false);
    cb_lu_useEdgeCrossing.setOpaque(false);
    cb_lu_useEdgeDistribution.setOpaque(false);
    cb_lu_useNodeDistance.setOpaque(false);
    registerCheckBoxAction(cb_lu_useNodeDistribution);
    registerCheckBoxAction(cb_lu_useBorderline);
    registerCheckBoxAction(cb_lu_useEdgeLength);
    registerCheckBoxAction(cb_lu_useEdgeCrossing);
    registerCheckBoxAction(cb_lu_useEdgeDistribution);
    registerCheckBoxAction(cb_lu_useNodeDistance);
    panelLUFields.add(tf_lu_initTemperature);
    panelLUFields.add(tf_lu_minTemperature);
    panelLUFields.add(tf_lu_minDistance);
    panelLUFields.add(tf_lu_tempScaleFactor);
    panelLUFields.add(tf_lu_maxRounds);
    panelLUFields.add(tf_lu_triesPerCell);
    panelLUFields.add(cb_lu_computePermutation);
    panelLUFields.add(cb_lu_uphillMovesAllowed);
    panelLULambda.add(new JLabel("Costfunction Nodedistribution :"), new GridBagConstraints(0, 0, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(new JLabel("Costfunction Borderline :"), new GridBagConstraints(0, 1, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(new JLabel("Costfunction Edgelength :"), new GridBagConstraints(0, 2, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(new JLabel("Costfunction Edgecrossing :"), new GridBagConstraints(0, 3, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(new JLabel("Costfunction Edge Distribution :"), new GridBagConstraints(0, 4, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, -20), 0, 0));
    panelLULambda.add(new JLabel("Costfunction Node Overlapping :"), new GridBagConstraints(0, 5, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, -20), 0, 0));
    panelLULambda.add(cb_lu_useNodeDistribution, new GridBagConstraints(1, 0, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLULambda.add(cb_lu_useBorderline, new GridBagConstraints(1, 1, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLULambda.add(cb_lu_useEdgeLength, new GridBagConstraints(1, 2, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLULambda.add(cb_lu_useEdgeCrossing, new GridBagConstraints(1, 3, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLULambda.add(cb_lu_useEdgeDistribution, new GridBagConstraints(1, 4, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLULambda.add(cb_lu_useNodeDistance, new GridBagConstraints(1, 5, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    panelLULambda.add(tf_lu_lambdaNodeDistribution, new GridBagConstraints(2, 0, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(tf_lu_lambdaBorderline, new GridBagConstraints(2, 1, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(tf_lu_lambdaEdgeLength, new GridBagConstraints(2, 2, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(tf_lu_lambdaEdgeCrossing, new GridBagConstraints(2, 3, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(tf_lu_lambdaEdgeDistribution, new GridBagConstraints(2, 4, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLULambda.add(tf_lu_lambdaNodeDistance, new GridBagConstraints(2, 5, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    JLabel[] label_lu_AdditionalCF = getAdditionalLUCostFunctionLabels();
    JTextField[] tf_lu_AdditionalCF = getAdditionalLUCostFunctionTextFields();
    JCheckBox[] cb_lu_AdditionalCF = getAdditionalLUCostFunctionCheckBoxes();
    for (int i = 0; i < label_lu_AdditionalCF.length; i++) panelLULambda.add(label_lu_AdditionalCF[i], new GridBagConstraints(0, AnnealingLayoutAlgorithm.COUT_COSTFUNCTION + i, 1, 1, 0.5, 0.5, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    for (int i = 0; i < cb_lu_AdditionalCF.length; i++) panelLULambda.add(cb_lu_AdditionalCF[i], new GridBagConstraints(1, AnnealingLayoutAlgorithm.COUT_COSTFUNCTION + i, 1, 1, 0.5, 0.5, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 20, 0, 0), 0, 0));
    for (int i = 0; i < tf_lu_AdditionalCF.length; i++) panelLULambda.add(tf_lu_AdditionalCF[i], new GridBagConstraints(2, AnnealingLayoutAlgorithm.COUT_COSTFUNCTION + i, 1, 1, 0.5, 0.5, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    button_lu_takeViewportSize = new JButton("take viewport size");
    button_lu_takeViewportSize.setOpaque(false);
    JLabel labelLUBoundsWidth = new JLabel("max. width :");
    JLabel labelLUBoundsHeight = new JLabel("max. height :");
    tf_lu_boundsWidth = new JTextField();
    tf_lu_boundsHeight = new JTextField();
    panelLUBounds.add(button_lu_takeViewportSize, new GridBagConstraints(0, 0, 1, 2, 0.5, 1.0, GridBagConstraints.SOUTHEAST, GridBagConstraints.HORIZONTAL, new Insets(25, 20, 15, 30), 0, 0));
    panelLUBounds.add(labelLUBoundsWidth, new GridBagConstraints(1, 0, 1, 1, 1.0, 1.0, GridBagConstraints.SOUTH, GridBagConstraints.HORIZONTAL, new Insets(15, 0, 5, 0), 0, 0));
    panelLUBounds.add(labelLUBoundsHeight, new GridBagConstraints(1, 1, 1, 1, 1.0, 1.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    panelLUBounds.add(tf_lu_boundsWidth, new GridBagConstraints(2, 0, 1, 1, 1.0, 1.0, GridBagConstraints.SOUTH, GridBagConstraints.HORIZONTAL, new Insets(15, 0, 5, 0), 0, 0));
    panelLUBounds.add(tf_lu_boundsHeight, new GridBagConstraints(2, 1, 1, 1, 1.0, 1.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    tf_lu_method_neighborsDepth = new JTextField();
    tf_lu_method_perimeterRadius = new JTextField();
    tf_lu_method_perimeterRadiusInc = new JTextField();
    comb_lu_Method = new JComboBox();
    comb_lu_Method.addItem(KEY_LAYOUT_UPDATE_METHOD_NEIGHBORS_ONLY);
    comb_lu_Method.addItem(KEY_LAYOUT_UPDATE_METHOD_PERIMETER);
    comb_lu_Method.setBackground(panelLUSurface.getBackground());
    comb_lu_Method.setOpaque(false);
    comb_lu_Method.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            action_CheckBoxSwitch();
        }
    });
    JPanel panelLUMethodLabels = new JPanel(new GridLayout(4, 1, 10, 5));
    JPanel panelLUMethodFields = new JPanel(new GridLayout(4, 1, 10, 5));
    panelLUMethodLabels.setOpaque(false);
    panelLUMethodFields.setOpaque(false);
    panelLUMethod.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Layout Update Method"));
    panelLUMethod.add(panelLUMethodLabels, BorderLayout.WEST);
    panelLUMethod.add(panelLUMethodFields, BorderLayout.EAST);
    panelLUMethodLabels.add(new JLabel("Method for Layout Updates :"));
    panelLUMethodLabels.add(new JLabel("Edge Distance to Neighbors :"));
    panelLUMethodLabels.add(new JLabel("Optical Distance to Neighbors :"));
    panelLUMethodLabels.add(new JLabel("Increase of optical Distance :"));
    panelLUMethodFields.add(comb_lu_Method);
    panelLUMethodFields.add(tf_lu_method_neighborsDepth);
    panelLUMethodFields.add(tf_lu_method_perimeterRadius);
    panelLUMethodFields.add(tf_lu_method_perimeterRadiusInc);
    JPanel panelLUMethodClustering = new JPanel(new GridLayout(3, 2, 10, 5));
    JPanel panelLUMethodClusteringSwitch = new JPanel(new GridLayout(1, 2, 10, 5));
    JPanel panelLUMethodClusteringEmpty = new JPanel();
    panelLUMethodClustering.setOpaque(false);
    panelLUMethodClusteringSwitch.setOpaque(false);
    panelLUMethodClusteringEmpty.setOpaque(false);
    tf_lu_clustering_factor = new JTextField();
    cb_lu_clustering_enable = new JCheckBox();
    tf_lu_clustering_moveScale = new JTextField();
    cb_lu_clustering_enable.setOpaque(false);
    registerCheckBoxAction(cb_lu_clustering_enable);
    panelLUMethodClusteringSwitch.add(new JLabel("on/off"));
    panelLUMethodClusteringSwitch.add(cb_lu_clustering_enable);
    panelLUMethodClustering.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Clustering"));
    panelLUMethodClustering.add(panelLUMethodClusteringSwitch);
    panelLUMethodClustering.add(panelLUMethodClusteringEmpty);
    panelLUMethodClustering.add(new JLabel("Clustering factor :"));
    panelLUMethodClustering.add(tf_lu_clustering_factor);
    panelLUMethodClustering.add(new JLabel("Cluster move scale factor :"));
    panelLUMethodClustering.add(tf_lu_clustering_moveScale);
    panelLUMethod.add(panelLUMethodClustering, BorderLayout.SOUTH);
    /*####################################################################*/
    cb_enableLayoutUpdate = new JCheckBox();
    if (!isOptimizer) {
        JPanel panelGlobal = new JPanel(new GridBagLayout());
        add(panelGlobal, BorderLayout.NORTH);
        cb_enableLayoutUpdate.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                switchLayoutUpdatePanel();
            }
        });
        panelGlobal.add(new JLabel("Run permanent:"), new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 5, 0, 30), 0, 0));
        panelGlobal.add(cb_enableLayoutUpdate, new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    }
    comb_loadPreSets = new JComboBox();
    for (int i = 0; i < preSetConfigs.length; i++) comb_loadPreSets.addItem(preSetConfigs[i].get(KEY_CONFIG_NAME));
    panelButtons.add(comb_loadPreSets);
    comb_loadPreSets.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            action_LoadPreSets(((JComboBox) e.getSource()).getSelectedIndex());
        }
    });
    panelSurfaceWrapper = new JScrollPane(panelSurface);
    Dimension innerSize = new Dimension(550, 350);
    panelSurfaceWrapper.setPreferredSize(innerSize);
    panelLUSurfaceWrapper = new JScrollPane(panelLUSurface);
    panelLUSurfaceWrapper.setPreferredSize(innerSize);
    tp_main.addTab("Values for main run", panelSurfaceWrapper);
    setToolTipTexts();
}
