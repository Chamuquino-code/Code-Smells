//}}} 
// //{{{ getBufferForDocument() 
// /** 
//  * Gets the DocumentBuffer for the document. 
//  * @param doc the XMLDocument 
//  * @return the DocumentBuffer for the XMLDocument or null if there is none registered 
//  */ 
// public static DocumentBuffer getBufferForDocument(XMLDocument doc) { 
//     Iterator bufferItr = m_buffers.iterator(); 
//     while (bufferItr.hasNext()) { 
//         DocumentBuffer buf = (DocumentBuffer)bufferItr.next(); 
//         if (buf.getXMLDocument() == doc) { 
//             return buf; 
//         } 
//     } 
//     return null; 
// }//}}} 
//{{{ exit() 
/**
     * Called when exiting jsXe.
     * @param view The view from which the exit was called.
     */
public static void exit(TabbedView view) {
    m_exiting = true;
    try {
        //saves properties 
        //exit only if the view really wants to. 
        if (view.close()) {
            Log.log(Log.NOTICE, jsXe.class, "Exiting");
            //Save the Catalog info 
            CatalogManager.save();
            String settingsDirectory = getSettingsDirectory();
            try {
                File properties = new File(settingsDirectory, "properties");
                FileOutputStream filestream = new FileOutputStream(properties);
                props.store(filestream, "Autogenerated jsXe properties" + System.getProperty("line.separator") + "#This file is not really meant to be edited.");
            } catch (IOException ioe) {
                exiterror(view, "Could not save jsXe properites.\n" + ioe.toString(), 1);
            } catch (ClassCastException cce) {
                exiterror(view, "Could not save jsXe properties.\n" + cce.toString(), 1);
            }
            try {
                File recentFiles = new File(settingsDirectory, "recent.xml");
                m_bufferHistory.save(recentFiles);
            } catch (IOException ioe) {
                exiterror(view, "Could not save jsXe recent files list.\n" + ioe.toString(), 1);
            }
            //stop logging. 
            Log.closeStream();
            System.exit(0);
        } else {
            m_exiting = false;
        }
    } catch (IOException ioe) {
        //failed save of a dirty buffer 
        Log.log(Log.ERROR, jsXe.class, ioe);
        JOptionPane.showMessageDialog(view, ioe, Messages.getMessage("IO.Error.Title"), JOptionPane.WARNING_MESSAGE);
        m_exiting = false;
    }
}
